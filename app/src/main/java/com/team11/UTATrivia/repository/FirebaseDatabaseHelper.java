package com.team11.UTATrivia.repository;

import android.net.Uri;
import android.util.Log;

import androidx.annotation.NonNull;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.team11.UTATrivia.models.User;
import com.team11.UTATrivia.utils.Utils;

import java.util.ArrayList;
import java.util.Objects;


public class FirebaseDatabaseHelper {

    private static final String TAG = "FirebaseDatabaseHelper";

    private static FirebaseAuth firebaseAuth;
    private static DatabaseReference userEndPoint;

    private static ArrayList<User> userArrayList;


    public FirebaseDatabaseHelper() {

        firebaseAuth = FirebaseAuth.getInstance();
        FirebaseDatabase firebaseDatabase = FirebaseDatabase.getInstance();
        userEndPoint = firebaseDatabase.getReference("user_table");

        userArrayList = getAllUsersFromFirebase();
    }

    private static ArrayList<User> getAllUsersFromFirebase() {
        final ArrayList<User> users = new ArrayList<>();
        readData(userEndPoint, dataSnapshot -> {
            for (DataSnapshot s : dataSnapshot.getChildren()) {
                users.add(s.getValue(User.class));
            }
        });
        return users;
    }


    public static ArrayList<User> getAllUsers() {
        return userArrayList;
    }


    public static void createUser(final User user, Uri uri) {
        firebaseAuth.createUserWithEmailAndPassword(user.getEmailAddress(), user.getPassword())
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        Log.e(TAG, "Auth Created");
                        user.setUserId(firebaseAuth.getCurrentUser().getUid()); // get the unique id generated by firebase and store it in the db
                        userEndPoint.child(user.getUserId()).
                                setValue(user).addOnCompleteListener(task1 -> {
                            if (task1.isSuccessful()) {
                                if (uri != null) {
                                    Utils.uploadImage(user.getUserId(), uri);// if user is uploading image as well then store the image too
                                    Log.e(TAG, "Database entry created");
                                    userArrayList.add(user);
                                }
                            } else {
                                Log.e(TAG, task1.getException().toString());
                                Objects.requireNonNull(firebaseAuth.getCurrentUser()).delete();
                            }
                        });
                    } else Log.e(TAG, task.getException().toString());
                });
    }


    public static User getUserByEmail(String email) {
        for (int i = 0; i < userArrayList.size(); i++) {
            if (userArrayList.get(i).getEmailAddress().equals(email))
                return userArrayList.get(i);
        }
        return null;
    }


    public static User getUserByID(String id) {
        for (int i = 0; i < userArrayList.size(); i++) {
            if (userArrayList.get(i).getUserId().equals(id))
                return userArrayList.get(i);
        }
        return null;
    }


    public static void updateUser(final User user) {
        userEndPoint.child(user.getUserId()).
                setValue(user).addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                Log.e(TAG, "Database entry created");
                updateLocalUsersList(user);
            } else {
                Log.e(TAG, task.getException().toString());
            }
        });
    }


    public static boolean deleteUser(final User user) {
        FirebaseAuth auth = FirebaseAuth.getInstance();
        auth.signInWithEmailAndPassword(user.getEmailAddress(),
                user.getPassword()).addOnSuccessListener(authResult -> {
            auth.getCurrentUser().delete();
            userEndPoint.child(user.getUserId())
                    .removeValue().addOnCompleteListener(task -> {
                if (task.isSuccessful()) {
                    Log.e(TAG, "Child deleted Successfully");
                    userArrayList.remove(user);
                } else {
                    Log.e(TAG, "Error Deleting child");
                }
            });
        });
        return true;
    }

    private static void readData(DatabaseReference databaseReference,
                                 final OnGetDataListener listener) {
        databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                listener.onSuccess(dataSnapshot);
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
            }
        });
    }


    public static void logoutUser() {
        FirebaseAuth.getInstance().signOut();
        CurrentDatabase.setUser(null);
    }


    private static void updateLocalUsersList(User user) {
        for (int i = 0; i < userArrayList.size(); i++) {
            if (userArrayList.get(i).equals(user)) {
                userArrayList.get(i).setName(user.getName());
                userArrayList.get(i).setEmailAddress(user.getEmailAddress());
                userArrayList.get(i).setPassword(user.getPassword());
                userArrayList.get(i).setAddress(user.getAddress());
                userArrayList.get(i).setOnlineStatus(user.getOnlineStatus());
                userArrayList.get(i).setPoints(user.getPoints());
                userArrayList.get(i).setLevel(user.getLevel());
                break;
            }
        }
    }



    public interface OnGetDataListener {

        void onSuccess(DataSnapshot dataSnapshot);
    }


}
